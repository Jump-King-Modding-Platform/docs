"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[73],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=i.createContext({}),s=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=s(t),m=r,d=g["".concat(u,".").concat(m)]||g[m]||c[m]||a;return t?i.createElement(d,o(o({ref:n},p),{},{components:t})):i.createElement(d,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=g;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1629:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],l={title:"Plugin Configuration",sidebar_position:3},u=void 0,s={unversionedId:"plugin-configuration",id:"plugin-configuration",title:"Plugin Configuration",description:"Introduction",source:"@site/docs/plugin-configuration.md",sourceDirName:".",slug:"/plugin-configuration",permalink:"/plugin-configuration",draft:!1,editUrl:"https://github.com/Jump-King-Modding-Platform/docs/tree/main/docs/plugin-configuration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Plugin Configuration",sidebar_position:3},sidebar:"docs",previous:{title:"Plugin Metadata",permalink:"/plugin-metadata"},next:{title:"Content",permalink:"/content"}},p={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Examples",id:"examples",level:2},{value:"Simple config",id:"simple-config",level:3},{value:"Config with in-game menu",id:"config-with-in-game-menu",level:3},{value:"Available config value type attributes",id:"available-config-value-type-attributes",level:2},{value:"Implementing a custom field renderer",id:"implementing-a-custom-field-renderer",level:2}],g={toc:c};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"If you want customizable options for your plugin, you can register a config using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Configs")," property on the ",(0,a.kt)("inlineCode",{parentName:"p"},"Plugin")," class."),(0,a.kt)("p",null,"By default users will be able to change the config from the ",(0,a.kt)("inlineCode",{parentName:"p"},"JKMP\\Config\\<YourPluginName>")," directory."),(0,a.kt)("p",null,"You can also create a configuration menu from the config so that users can edit the config in game."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"simple-config"},"Simple config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyPlugin.cs"',title:'"MyPlugin.cs"'},'public class MyPlugin : JKMP.Core.Plugins.Plugin\n{\n    class MyConfig\n    {\n        public int MyInt { get; set; } = 1;\n        public string MyString { get; set; }\n        public Dictionary<string, string> MyDictionary { get; set; } = new();\n    }\n\n    public override void Initialize()\n    {\n        // Load config (or create a new one)\n        // In a real plugin you probably want to\n        // catch potential IO and deserialization exceptions.\n        var myConfig = Configs.Load<MyConfig>("MyConfig");\n        /* myConfig =\n        {\n            myInt = 1,\n            myString = null,\n            myDictionary = {}\n        }\n        */\n\n        // Modify config and save new values\n        myConfig.MyInt = 2;\n        Configs.SaveConfig(myConfig, "MyConfig");\n\n        // Reload config for testing purposes\n        myConfig = Configs.Load<MyConfig>("MyConfig");\n        /* myConfig =\n        {\n            myInt = 2,\n            myString = null,\n            myDictionary = {}\n        }*/\n    }\n}\n')),(0,a.kt)("h3",{id:"config-with-in-game-menu"},"Config with in-game menu"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyPlugin.cs"',title:'"MyPlugin.cs"'},'using JKMP.Core.Configuration.Attributes;\nusing JKMP.Core.Configuration.UI;\n\npublic class MyPlugin : JKMP.Core.Plugins.Plugin\n{\n    class MyConfig\n    {\n        [SliderField(MinValue = 0, MaxValue = 100, StepSize = 10)]\n        public int MyInt { get; set; } = 50;\n\n        [TextField]\n        public string MyString { get; set; } = "";\n    }\n\n    public override void Initialize()\n    {\n        // Load config (or create a new one)\n        // In a real plugin you probably want to\n        // catch potential IO and deserialization exceptions.\n        var myConfig = Configs.Load<MyConfig>("MyConfig");\n        /* myConfig =\n        {\n            myInt = 50,\n            myString = null\n        }\n        */\n\n        // Create config menu\n        IConfigMenu menu = Configs.CreateConfigMenu<MyConfig>(\n            title: "My Config",\n\n            // A file path\n            // No extension assumes .json\n            // Note that the config is always serialized\n            // to json regardless of the extension\n            source: "MyConfig"\n        );\n\n        // When values are changed in-game they are automatically saved.\n\n        // If you want to do something when a property changes\n        // you can do it like this:\n        menu.OnPropertyChanged += (sender, args) =>\n        {\n            switch args.PropertyName\n            {\n                case nameof(MyConfig.MyInt):\n                {\n                    // Do something when MyInt changes\n\n                    // Access new value either from args.Value\n                    LogManager.TempLogger.Info($"MyInt changed to {args.Value}");\n\n                    // Or by accessing the property from the menu directly.\n                    LogManager.TempLogger.Info($"MyInt changed to {menu.Values.MyInt}");\n                    break;\n                }\n            }\n        }\n\n        // Alternatively you can use custom getters/setters\n        // on the config class and handle it in the class itself.\n}\n')),(0,a.kt)("h2",{id:"available-config-value-type-attributes"},"Available config value type attributes"),(0,a.kt)("p",null,"These are the available built-in field type attributes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"SliderFieldAttribute"),(0,a.kt)("li",{parentName:"ul"},"TextFieldAttribute"),(0,a.kt)("li",{parentName:"ul"},"CheckBoxFieldAttribute")),(0,a.kt)("p",null,"They should be fairly self-explanatory. Use intellisense to see the available properties."),(0,a.kt)("h2",{id:"implementing-a-custom-field-renderer"},"Implementing a custom field renderer"),(0,a.kt)("p",null,"If you want to implement a custom field renderer, you can do so by following these steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a class that inherits from ",(0,a.kt)("inlineCode",{parentName:"li"},"SettingsOptionAttribute"),"."),(0,a.kt)("li",{parentName:"ol"},"Add the following attributes to the class: ",(0,a.kt)("inlineCode",{parentName:"li"},"SettingsOptionsCreatorAttribute"),", and optionally ",(0,a.kt)("inlineCode",{parentName:"li"},"AttributeUsageAttribute")," with validOn set to ",(0,a.kt)("inlineCode",{parentName:"li"},"AttributeTargets.Property"),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The SettingsOptionsCreatorAttribute takes a type parameter. It should be the type of the ",(0,a.kt)("inlineCode",{parentName:"li"},"ConfigPropertyCreator")," which we'll be implementing next."))),(0,a.kt)("li",{parentName:"ol"},"Create a class that inherits from ",(0,a.kt)("inlineCode",{parentName:"li"},"ConfigPropertyCreator<T>"),". The T should be the type of the attribute you created in step 1."),(0,a.kt)("li",{parentName:"ol"},"Implement the ",(0,a.kt)("inlineCode",{parentName:"li"},"SupportedTypes")," property. It should return a collection of property types that the creator supports."),(0,a.kt)("li",{parentName:"ol"},"Implement the ",(0,a.kt)("inlineCode",{parentName:"li"},"CreateField")," method. It should return an ",(0,a.kt)("inlineCode",{parentName:"li"},"IMenuItem")," that represents the config value. Make sure to read the intellisense if you're unsure about the method parameters."),(0,a.kt)("li",{parentName:"ol"},"When the value is changed you should invoke the ",(0,a.kt)("inlineCode",{parentName:"li"},"base.ValueChanged")," action and pass the new value. The new value will be automatically converted to the property's type for simple value types such as ",(0,a.kt)("inlineCode",{parentName:"li"},"int")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"double")," etc.")),(0,a.kt)("p",null,"Here is the implementation of the slider as an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'using JKMP.Core.Configuration.Attributes;\nusing JKMP.Core.Configuration.Attributes.PropertyCreators;\nusing JKMP.Core.Configuration.UI;\n\n/// <summary>\n/// A menu field that is used to display a slider. Supported property types are <see cref="float"/> and <see cref="int"/>\n/// Note that the underlying slider value is always a <see cref="float"/>.\n/// </summary>\n[SettingsOptionCreator(typeof(SliderFieldCreator))]\n[AttributeUsage(AttributeTargets.Property)]\npublic sealed class SliderFieldAttribute : SettingsOptionAttribute\n{\n    /// <summary>\n    /// The minimum value of the slider. 0 by default.\n    /// </summary>\n    public float MinValue { get; set; } = 0;\n\n    /// <summary>\n    /// The maximum value of the slider. 1 by default.\n    /// </summary>\n    public float MaxValue { get; set; } = 1;\n\n    /// <summary>\n    /// The amount to increase or decrease the slider value by when the user presses the left or right arrow keys. 0.1 by default.\n    /// </summary>\n    public float StepSize { get; set; } = 0.1f;\n}\n\ninternal class SliderFieldCreator : ConfigPropertyCreator<SliderFieldAttribute>\n{\n    public override ICollection<Type> SupportedTypes => new List<Type>\n    {\n        typeof(float),\n        typeof(int)\n    };\n\n    public override IMenuItem CreateField(object config, string fieldName, PropertyInfo propertyInfo, SliderFieldAttribute attribute, List<IDrawable> drawables)\n    {\n        var result = new SliderField(fieldName, (float)Convert.ChangeType(propertyInfo.GetValue(config), TypeCode.Single), attribute.MinValue, attribute.MaxValue, attribute.StepSize);\n        result.ValueChanged += val =>\n        {\n            ValueChanged?.Invoke(val);\n        };\n        return result;\n    }\n}\n')),(0,a.kt)("p",null,"The slider menu item implementation has been omitted from the example to keep it short and in scope. If you want to see the source for it you can ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Jump-King-Modding-Platform/JKMP.Core/blob/main/JKMP.Core/UI/MenuFields/SliderField.cs"},"find it here"),"."))}m.isMDXComponent=!0}}]);