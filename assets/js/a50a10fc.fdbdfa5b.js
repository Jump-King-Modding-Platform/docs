"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[448],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,y=d["".concat(u,".").concat(m)]||d[m]||s[m]||i;return n?r.createElement(y,a(a({ref:t},p),{},{components:n})):r.createElement(y,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7211:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={title:"Input",sidebar_position:6},u=void 0,c={unversionedId:"input",id:"input",title:"Input",description:"Introduction",source:"@site/docs/input.md",sourceDirName:".",slug:"/input",permalink:"/input",draft:!1,editUrl:"https://github.com/Jump-King-Modding-Platform/docs/tree/main/docs/input.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Input",sidebar_position:6},sidebar:"docs",previous:{title:"Logging",permalink:"/logging"}},p={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Examples",id:"examples",level:2},{value:"Creating an action",id:"creating-an-action",level:3},{value:"Using an action",id:"using-an-action",level:3}],d={toc:s};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"If you want to read input from the player you should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Plugin.Input")," property."),(0,i.kt)("p",null,"It brings the following advantages over using ",(0,i.kt)("inlineCode",{parentName:"p"},"KeyboardState.GetState()")," etc:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Allows you to either subscribe to events or poll the action every update, depending on how your plugin's workflow is set up."),(0,i.kt)("li",{parentName:"ul"},"Allows the player to rebind the action to any key they want."),(0,i.kt)("li",{parentName:"ul"},"Prevents multiple actions from being bound to the same key, unless the player explicitly allows it."),(0,i.kt)("li",{parentName:"ul"},"Allows the player to bind the action to multiple keys at once, and even mixing keyboard/mouse/gamepad buttons."),(0,i.kt)("li",{parentName:"ul"},"Plugins can add support for new input devices, and the player can bind your actions to them without you having to explicitly add support for them.")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"creating-an-action"},"Creating an action"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyPlugin.cs"',title:'"MyPlugin.cs"'},'public class MyPlugin : JKMP.Core.Plugins.Plugin\n{\n    private InputManager.ActionInfo myAction;\n\n    public override void CreateInputActions()\n    {\n        myAction = Input.CreateActionWithName(\n            name: "MyAction", // Unique name for the action. Only has to be unique in the scope of the plugin.\n            uiName: "My Action", // The name that will be displayed in the UI\n            onlyGameInput: true, // Only allow this action to be triggered when the game is unpaused\n            defaultKeys: "a", "xpad-a" // Default binds to \'A\' keyboard key and \'X\' button (xbox layout) on controller\n        );\n    }\n}\n')),(0,i.kt)("h3",{id:"using-an-action"},"Using an action"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// Either bind the action to a callback:\nInput.BindAction(myAction, MyActionCallback);\n\nvoid MyActionCallback(bool pressed)\n{\n    // Pressed = true if the action was just pressed, false if it was just released.\n}\n\n// Or poll the action every update:\nif (myAction.IsPressed)\n{\n    // Do something\n}\n")))}m.isMDXComponent=!0}}]);